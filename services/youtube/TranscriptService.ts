import { ITranscriptService } from '../interfaces/ITranscriptService';
import { TranscriptSegment, TranscriptOptions } from '@/types/transcript';
import { TranscriptError } from '@/types/errors';
import { YoutubeTranscript } from 'youtube-transcript';

export class TranscriptService implements ITranscriptService {
    private readonly MAX_RETRIES = 3;
    private readonly RETRY_DELAY = 1000;

    public async fetchTranscript(
        videoId: string,
        options?: TranscriptOptions
    ): Promise<TranscriptSegment[]> {
        let lastError: Error | null = null;

        // Different fetch configurations to try
        const attempts = [
            () => this.fetchWithConfig(videoId, options),
            () => this.fetchWithConfig(videoId, { ...options, autoGenerated: true }),
            () => this.fetchWithConfig(videoId, { ...options, language: 'en' }),
            () => this.fetchWithConfig(videoId, {
                ...options,
                language: 'en',
                autoGenerated: true
            }),
        ];

        for (const attempt of attempts) {
            try {
                return await attempt();
            } catch (error) {
                lastError = error as Error;
                continue;
            }
        }

        throw new TranscriptError(
            lastError?.message || 'Failed to fetch transcript after all attempts'
        );
    }

    public async getRawTranscript(videoId: string): Promise<string> {
        const transcript = await this.fetchTranscript(videoId);
        return transcript.map(segment => segment.text).join(' ');
    }

    private async fetchWithConfig(
        videoId: string,
        options?: TranscriptOptions
    ): Promise<TranscriptSegment[]> {
        for (let attempt = 1; attempt <= this.MAX_RETRIES; attempt++) {
            try {
                const config: any = {};
                if (options?.language) config.lang = options.language;
                if (options?.autoGenerated) config.auto = true;

                const transcript = await YoutubeTranscript.fetchTranscript(videoId, config);
                return transcript.map(entry => ({
                    text: entry.text,
                    duration: entry.duration,
                    offset: entry.offset
                }));
            } catch (error) {
                if (attempt === this.MAX_RETRIES) throw error;
                await new Promise(resolve =>
                    setTimeout(resolve, this.RETRY_DELAY * attempt)
                );
            }
        }

        throw new TranscriptError('Failed to fetch transcript');
    }
} 